
# split :

traing, test = genre_sample.randomSplit([0.6,0.4])




#### Logistics Regression

lr = LogisticRegression(featuresCol='features',labelCol='labels')
lr_model = lr.fit(traing)
pred = lr_model.transform(test)

pred.show(500,)



#     -------------------------------------------------------------------------------------------------------
#    +--------+------+--------+---------+--------+---------+--------+--------+--------+-------+------------------+-------------+-------------+--------------------+------+--------------------+--------------------+----------+
#    |      D1|    D2|      D3|       D4|      D5|       D6|      D7|     D10|      A1|     A2|      MSD_TRACKID1|    GenreType|is_electronic|            features|labels|       rawPrediction|         probability|prediction|
#    +--------+------+--------+---------+--------+---------+--------+--------+--------+-------+------------------+-------------+-------------+--------------------+------+--------------------+--------------------+----------+
#    |1.261E-4|3351.0| 58100.0|  3.903E7| 6.797E8| 1.183E10|8.452E11|4.467E15|7.093E-4| 5626.0|TRJNDIV128F426F03B|   Electronic|            1|[1.261E-4,3351.0,...|     0|[4.56535509832452...|[0.49703474197851...|       0.0|
#    |1.261E-4|3351.0| 58100.0|  3.903E7| 6.797E8| 1.183E10|8.452E11|4.467E15|7.093E-4| 5626.0|TRJNDIV128F426F03B|   Electronic|            1|[1.261E-4,3351.0,...|     0|[4.56535509832452...|[0.49703474197851...|       0.0|
#    |0.004715|3356.0| 15180.0|  4.005E7| 1.761E8|  7.747E8|8.819E11|7.499E13|0.007511| 5777.0|TRDXLVJ128F92C7C19|   Electronic|            1|[0.004715,3356.0,...|     0|[3.85806448665754...|[0.32915833753585...|       0.0|
#    |0.006288|6709.0|  9230.0|  1.605E8| 2.236E8|  3.108E8|7.075E12|1.909E13| 0.02309|11580.0|TRGNWHU128F933E924|   Electronic|            1|[0.006288,6709.0,...|     0|[4.76090671101855...|[0.42084597777950...|       0.0|
#    |0.006288|6709.0|  9230.0|  1.605E8| 2.236E8|  3.108E8|7.075E12|1.909E13| 0.02309|11580.0|TRGNWHU128F933E924|   Electronic|            1|[0.006288,6709.0,...|     0|[4.76090671101855...|[0.42084597777950...|       0.0|
#    +--------+------+--------+---------+--------+---------+--------+--------+--------+-------+------------------+-------------+-------------+--------------------+------+--------------------+--------------------+----------+
#    only showing top 50 rows



# the maximun of labels column is 27

# Precision
nP = pred.filter((F.col('prediction') == 0)).count()
TP = pred.filter((F.col('prediction') == 0) & (F.col('labels') == 0)).count()
print('precision for "Electronic: {}'.format(TP /nP))
# precision for "Electronic: 0.5234785321800628





#recall
NN = pred.filter((F.col('labels') == 0)).count()
print('recall for "Electronic : {}'.format(TP / NN))
# recall for "Electronic : 0.9279744346116028


#accuracy
total = pred.count()
MM = 0
for i in [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]:
   for i2 in [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]:
   	   if i2 == i:
            MM += ((pred.filter((F.col('prediction') == i) & (F.col('is_electronic') == i2)).count()))
print('accuracy for "Electronic: {}'.format(MM / total))
#  accuracy for "Electronic: 0.45565478010887517






